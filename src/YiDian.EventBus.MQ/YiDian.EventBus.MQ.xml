<?xml version="1.0"?>
<doc>
    <assembly>
        <name>YiDian.EventBus.MQ</name>
    </assembly>
    <members>
        <member name="T:YiDian.EventBus.MQ.DirectEventBus">
            <summary>
            Direct 类型 消息总线实现
            </summary>
        </member>
        <member name="M:YiDian.EventBus.MQ.DirectEventBus.#ctor(Microsoft.Extensions.Logging.ILogger{YiDian.EventBus.IDirectEventBus},System.IServiceProvider,YiDian.EventBus.MQ.IRabbitMQPersistentConnection,YiDian.EventBus.IEventSeralize,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="autofac"></param>
            <param name="persistentConnection"></param>
            <param name="seralize"></param>
            <param name="retryCount"></param>
            <param name="cacheCount"></param>
        </member>
        <member name="M:YiDian.EventBus.MQ.DirectEventBus.#ctor(System.String,Microsoft.Extensions.Logging.ILogger{YiDian.EventBus.IDirectEventBus},System.IServiceProvider,YiDian.EventBus.MQ.IRabbitMQPersistentConnection,YiDian.EventBus.IEventSeralize,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="brokerName"></param>
            <param name="logger"></param>
            <param name="autofac"></param>
            <param name="persistentConnection"></param>
            <param name="seralize"></param>
            <param name="retryCount"></param>
            <param name="cacheCount"></param>
        </member>
        <member name="P:YiDian.EventBus.MQ.DirectEventBus.BROKER_NAME">
            <summary>
            Exchange名称
            </summary>
        </member>
        <member name="M:YiDian.EventBus.MQ.DirectEventBus.GetEventKeyFromRoutingKey(System.String)">
            <summary>
            获取路由键
            </summary>
            <param name="routingKey"></param>
            <returns></returns>
        </member>
        <member name="T:YiDian.EventBus.MQ.EventBusFactory">
            <summary>
            EventBus创建工厂
            </summary>
        </member>
        <member name="M:YiDian.EventBus.MQ.EventBusFactory.#ctor(YiDian.EventBus.MQ.DefaultConnection.DefaultMqConnectSource,System.IServiceProvider,Microsoft.Extensions.Logging.ILogger{YiDian.EventBus.IDirectEventBus},Microsoft.Extensions.Logging.ILogger{YiDian.EventBus.ITopicEventBus})">
            <summary>
            创建一个工厂实例
            </summary>
            <param name="source">RabbitMq连接源</param>
            <param name="scope">对象生命周期管理器</param>
            <param name="logger">IDirectEventBus日志</param>
            <param name="logger2">ITopicEventBus日志</param>
        </member>
        <member name="M:YiDian.EventBus.MQ.EventBusFactory.GetDirect``1(``0,System.String,System.String,System.Int32)">
            <summary>
            创建指定序列化，连接地址，交换机名称的IDirectEventBus类型EventBus
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer"></param>
            <param name="connSource"></param>
            <param name="brokerName"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:YiDian.EventBus.MQ.EventBusFactory.GetTopic``1(``0,System.String,System.String,System.Int32)">
            <summary>
             创建指定序列化，连接地址，交换机名称的ITopicEventBus类型EventBus
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer"></param>
            <param name="connSource"></param>
            <param name="brokerName"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:YiDian.EventBus.MQ.EventHanlerCacheMgr.GetDynamicHandler(System.Type,YiDian.EventBus.IBytesHandler@,Microsoft.Extensions.DependencyInjection.IServiceScope@)">
            <summary>
            从缓存中获取实例
            </summary>
            <param name="type"></param>
            <param name="handler"></param>
            <param name="scope"></param>
            <returns>是否是从缓存中获取</returns>
        </member>
        <member name="T:YiDian.EventBus.MQ.HttpEventsManager">
            <summary>
            基于webapi的MQ事件名称管理器
            </summary>
        </member>
        <member name="P:YiDian.EventBus.MQ.HttpEventsManager.AllowNoRegisterEvent">
            <summary>
            是否允许未注册的事件
            </summary>
        </member>
        <member name="M:YiDian.EventBus.MQ.HttpEventsManager.#ctor(System.String,System.Boolean)">
            <summary>
            创建一个事件管理器
            </summary>
            <param name="web_api_address"></param>
            <param name="allow_no_reg"></param>
        </member>
        <member name="T:YiDian.EventBus.MQ.JsonSerializer">
            <summary>
            实现IEventSeralize的Json序列化
            </summary>
        </member>
        <member name="M:YiDian.EventBus.MQ.JsonSerializer.#ctor(System.Text.Encoding)">
            <summary>
            创建一个JSON序列化实例 
            </summary>
        </member>
        <member name="P:YiDian.EventBus.MQ.JsonSerializer.DateFormat">
            <summary>
            默认使用UtcKindDataParse
            </summary>
        </member>
        <member name="P:YiDian.EventBus.MQ.JsonSerializer.Encoding">
            <summary>
            编码格式
            </summary>
        </member>
        <member name="M:YiDian.EventBus.MQ.JsonSerializer.DeserializeObject(System.ReadOnlyMemory{System.Byte},System.Type)">
            <summary>
            反序列化字节数组
            </summary>
            <param name="data"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:YiDian.EventBus.MQ.JsonSerializer.Serialize``1(``0)">
            <summary>
            序列化对象为字节数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="event"></param>
            <returns></returns>
        </member>
        <member name="T:YiDian.EventBus.MQ.KeyAttribute.AppDomainTypeFinder">
            <summary>
            基于特定关键字加载当前上下文中的所有程序集，
            查找所有类型。
            </summary>
        </member>
        <member name="P:YiDian.EventBus.MQ.KeyAttribute.AppDomainTypeFinder.App">
            <summary>当前AppDomain,应用进程</summary>
        </member>
        <member name="P:YiDian.EventBus.MQ.KeyAttribute.AppDomainTypeFinder.LoadAppDomainAssemblies">
            <summary>
            是否自动加载运行时上下文的程序集，如果为false，只加载配置过的程序集。
            </summary>
        </member>
        <member name="P:YiDian.EventBus.MQ.KeyAttribute.AppDomainTypeFinder.AssemblyNames">
            <summary>
            配置需要加载的程序集。
            </summary>
        </member>
        <member name="P:YiDian.EventBus.MQ.KeyAttribute.AppDomainTypeFinder.AssemblySkipLoadingPattern">
            <summary>忽略的DLL</summary>
        </member>
        <member name="M:YiDian.EventBus.MQ.KeyAttribute.AppDomainTypeFinder.GetAssemblies">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:YiDian.EventBus.MQ.KeyAttribute.AppDomainTypeFinder.AddAssembliesInAppDomain(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            遍历AppDomain中的程序集，符合条件就添加到列表。
            </summary>
            <param name="addedAssemblyNames">已添加的程序集名称</param>
            <param name="assemblies">需要添加到的程序集结果列表</param>
        </member>
        <member name="M:YiDian.EventBus.MQ.KeyAttribute.AppDomainTypeFinder.AddConfiguredAssemblies(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            将属性AssemblyNames中显式配置的程序集加载到列表中。
            </summary>
            <param name="addedAssemblyNames"></param>
            <param name="assemblies"></param>
        </member>
        <member name="M:YiDian.EventBus.MQ.KeyAttribute.AppDomainTypeFinder.Matches(System.String)">
            <summary>
            判断是否符合添加条件
            </summary>
            <param name="assemblyFullName"></param>
            <returns></returns>
        </member>
        <member name="M:YiDian.EventBus.MQ.KeyAttribute.AppDomainTypeFinder.Matches(System.String,System.String)">
            <summary>
            判断是否符合添加条件
            </summary>
            <param name="assemblyFullName"></param>
            <returns></returns>
        </member>
        <member name="M:YiDian.EventBus.MQ.KeyAttribute.AppDomainTypeFinder.LoadMatchingAssemblies(System.String)">
            <summary>
            加载目录下符合条件的程序集
            </summary>
        </member>
        <member name="M:YiDian.EventBus.MQ.KeyAttribute.AppDomainTypeFinder.DoesTypeImplementOpenGeneric(System.Type,System.Type)">
            <summary>
            判断类型是否是泛型
            </summary>
            <param name="type"></param>
            <param name="openGeneric"></param>
            <returns></returns>
        </member>
        <member name="M:YiDian.EventBus.MQ.KeyAttribute.FastInvoke.EmitGetter(System.Reflection.PropertyInfo)">
            <summary>
            Emit获取对象的属性值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="F:YiDian.EventBus.MQ.Rpc.Route.RoutingTables.actionsDic">
            <summary>
            Action名称字典 Action名称=methodInfo
            </summary>
        </member>
        <member name="P:YiDian.EventBus.MQ.Rpc.RpcServerConfig.ApplicationId">
            <summary>
            服务器ID
            <para>连接在同一个MQ集群上的不同应用应该具有不同的名称</para>
            通过配置相同名称的服务器达到服务器间的负载均衡
            </summary>
        </member>
        <member name="P:YiDian.EventBus.MQ.Rpc.RpcServerConfig.Fetchout">
            <summary>
            批量从队列获取消息数量
            </summary>
        </member>
        <member name="M:YiDian.Soa.Sp.Extensions.MQExtensions.UseRabbitMq(YiDian.Soa.Sp.SoaServiceContainerBuilder,System.Action{YiDian.EventBus.MQ.DefaultConnection.DefaultMqConnectSource},YiDian.EventBus.IAppEventsManager)">
            <summary>
            注册MQ连接字符串
            <para>格式：server=ip:port;user=username;password=pwd;vhost=vhostname;name=zs</para>
            eventsmgr=inmemory
            </summary>
            <param name="builder"></param>
            <param name="action"></param>
            <param name="eventsManager"></param>
            <returns></returns>
        </member>
        <member name="M:YiDian.Soa.Sp.Extensions.MQExtensions.UseRabbitMq(YiDian.Soa.Sp.SoaServiceContainerBuilder,System.String,System.String)">
            <summary>
            使用RabbitMq
            </summary>
            <param name="builder"></param>
            <param name="mqConnstr"></param>
            <param name="enven_mgr_api"></param>
            <returns></returns>
        </member>
        <member name="M:YiDian.Soa.Sp.Extensions.MQExtensions.UseRabbitMq(YiDian.Soa.Sp.SoaServiceContainerBuilder,System.String,YiDian.EventBus.IAppEventsManager)">
            <summary>
            使用字符串地址创建RabbitMq
            </summary>
            <param name="builder">构造器</param>
            <param name="mqConnstr">MQ地址</param>
            <param name="enven_mgr_api">事件名称管理器地址</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:YiDian.Soa.Sp.Extensions.MQExtensions.UseRabbitMq(YiDian.Soa.Sp.SoaServiceContainerBuilder,System.Action{YiDian.EventBus.MQ.DefaultConnection.DefaultMqConnectSource},System.String)" -->
        <member name="M:YiDian.Soa.Sp.Extensions.MQExtensions.AutoCreateAppEvents(YiDian.Soa.Sp.SoaServiceContainerBuilder,System.String,System.String)">
            <summary>
            创建系统所依赖的消息总线中的消息类型
            </summary>
            <param name="builder">builder</param>
            <param name="all_apps">所依赖的消息系统名称列表，以逗号隔开
            <para>为空时，从配置文件中加载键为 dependApps 的值</para>
            </param>
            <param name="fileDir">创建消息 体的目录
            <para>为空时，使用当前系统目录 依赖命令行传入键为-pj_dir的参数</para>
            </param>
            <returns>builder</returns>
        </member>
        <member name="M:YiDian.Soa.Sp.Extensions.MQExtensions.UseDirectEventBus(YiDian.Soa.Sp.SoaServiceContainerBuilder,System.Int32,YiDian.EventBus.IEventSeralize,System.String)">
            <summary>
            创建默认的<see cref="T:YiDian.EventBus.IDirectEventBus"/>实现
            </summary>
            <param name="builder">构造器</param>
            <param name="cacheLength">缓存大小</param>
            <param name="seralizer">序列化类型</param>
            <param name="broker_name">交换机名称</param>
            <returns></returns>
        </member>
        <member name="M:YiDian.Soa.Sp.Extensions.MQExtensions.UseTopicEventBus(YiDian.Soa.Sp.SoaServiceContainerBuilder,System.Int32,YiDian.EventBus.IEventSeralize,System.String)">
            <summary>
            创建默认的<see cref="T:YiDian.EventBus.ITopicEventBus"/>实现
            </summary>
            <param name="builder"></param>
            <param name="cacheLength"></param>
            <param name="seralizer"></param>
            <param name="broker_name">交换机名称</param>
            <returns></returns>
        </member>
        <member name="M:YiDian.Soa.Sp.Extensions.RPCServerExtensions.UseRpc(YiDian.Soa.Sp.SoaServiceContainerBuilder,YiDian.EventBus.MQ.Rpc.RpcServerConfig)">
            <summary>
            在指定的MQ上创建一个RPC服务器
            </summary>
            <param name="builder"></param>
            <param name="config"></param>
            <param name="seralize"></param>
            <returns></returns>
        </member>
        <member name="M:YiDian.Soa.Sp.Extensions.RPCServerExtensions.UseMqRpcClient(YiDian.Soa.Sp.SoaServiceContainerBuilder,System.String,System.String)">
            <summary>
            在指定的MQ上创建RPC客户端工厂
            </summary>
            <param name="builder"></param>
            <param name="clientName"></param>
            <param name="mqname"></param>
            <returns></returns>
        </member>
        <member name="M:System.JsonHelper.UseUtcKindDataParse">
            <summary>
            format:2020-01-08T18:57:12.629+08:00
            </summary>
        </member>
    </members>
</doc>
